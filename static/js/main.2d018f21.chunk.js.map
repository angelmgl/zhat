{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","messageInput","document","getElementById","textInput","submitButton","handleSubmit","event","preventDefault","text","trim","length","sendMessage","innerText","className","onSubmit","htmlFor","id","contentEditable","data-text","onInput","addEventListener","e","keyCode","click","isTyping","style","display","type","multiple","onChange","files","target","MyMessage","message","attachments","src","file","alt","float","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","scrollDown","feed","scrollTop","scrollHeight","title","keys","Object","key","lastMessageKey","width","marginRight","renderMessages","LoginForm","setUsername","password","setPassword","error","setError","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","placeholder","required","align","App","getItem","height","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render"],"mappings":"yLA6EeA,EAzEK,SAACC,GAAW,IAAD,EACDC,mBAAS,IADR,mBACpBC,EADoB,KACbC,EADa,KAEnBC,EAAkBJ,EAAlBI,OAAQC,EAAUL,EAAVK,MAEVC,EAAeC,SAASC,eAAe,iBACvCC,EAAYF,SAASC,eAAe,cACpCE,EAAeH,SAASC,eAAe,iBAEvCG,EAAe,SAACC,GAClBA,EAAMC,iBAEN,IAAMC,EAAOZ,EAAMa,OAEhBD,EAAKE,OAAS,GAAGC,YAAYZ,EAAOD,EAAQ,CAAEU,SAEjDX,EAAS,IACTG,EAAaY,UAAY,IAsB7B,OACI,uBAAMC,UAAU,eAAeC,SAAUT,EAAzC,UAEI,uBAAOU,QAAQ,gBAAf,SACI,sBAAMF,UAAU,eAAhB,SACI,cAAC,IAAD,CAASA,UAAU,qBAI3B,qBACIA,UAAU,gBACVG,GAAG,gBACHC,gBAAgB,OAChBC,YAAU,wBACVC,QAjCK,WACbhB,EAAUP,MAAQI,EAAaY,UAC/Bf,EAASM,EAAUP,OAGnBI,EAAaoB,iBAAiB,SAAS,SAACC,GAElB,KAAdA,EAAEC,SACFlB,EAAamB,WAIrBC,YAAS9B,EAAOI,MAyBZ,uBAAOkB,GAAG,aAAaF,SAAUT,EAAcoB,MAAO,CAACC,QAAS,UAEhE,uBACIC,KAAK,OACLC,UAAU,EACVZ,GAAG,gBACHS,MAAO,CAAEC,QAAS,QAClBG,SA7BS,SAACvB,GAClBK,YAAYZ,EAAOD,EAAQ,CAAEgC,MAAOxB,EAAMyB,OAAOD,MAAOtB,KAAM,QA+B1D,wBAAQmB,KAAK,SAASX,GAAG,gBAAgBH,UAAU,cAAnD,SACI,cAAC,IAAD,CAAcA,UAAU,oBCpDzBmB,EAnBG,SAAC,GAAiB,IAAD,EAAdC,EAAc,EAAdA,QACjB,OAAU,OAAPA,QAAO,IAAPA,GAAA,UAAAA,EAASC,mBAAT,eAAsBxB,QAAS,EAE1B,qBACIyB,IAAKF,EAAQC,YAAY,GAAGE,KAC5BC,IAAI,qBACJxB,UAAU,gBACVY,MAAO,CAAEa,MAAO,WAMxB,qBAAKzB,UAAU,aAAf,SACKoB,EAAQzB,QCcN+B,EA5BM,SAAC,GAA8B,IAAD,IAA3BC,EAA2B,EAA3BA,YAAaP,EAAc,EAAdA,QAC3BQ,GAAwBD,GAAeA,EAAYE,OAAOC,WAAaV,EAAQS,OAAOC,SAE5F,OACI,sBAAK9B,UAAU,cAAf,UACK4B,GACG,qBACI5B,UAAU,iBACVY,MAAO,CAAEmB,gBAAgB,OAAD,cAASX,QAAT,IAASA,GAAT,UAASA,EAASS,cAAlB,aAAS,EAAiBG,OAA1B,SAGxB,OAAPZ,QAAO,IAAPA,GAAA,UAAAA,EAASC,mBAAT,eAAsBxB,QAAS,EACzB,qBACCyB,IAAKF,EAAQC,YAAY,GAAGE,KAC5BC,IAAI,qBACJxB,UAAU,gBACVY,MAAO,CAAEqB,WAAYL,EAAuB,OAAS,UAGrD,qBAAK5B,UAAU,gBAAgBY,MAAO,CAAEqB,WAAYL,EAAuB,OAAS,QAApF,SACCR,EAAQzB,WCkDduC,EAlEE,SAACrD,GAAW,IACjBsD,EAA0CtD,EAA1CsD,MAAOC,EAAmCvD,EAAnCuD,WAAYC,EAAuBxD,EAAvBwD,SAAUC,EAAazD,EAAbyD,SAE/BC,EAAOJ,GAASA,EAAMC,GAEtBI,EAAqB,SAACpB,EAASqB,GACjC,OAAOF,EAAKG,OAAOC,KAAI,SAACC,EAAQC,GAAT,aAAmBD,EAAOE,YAAc1B,EAAQjB,IACnE,qBAEIH,UAAU,eACVY,MAAO,CAAEa,MAAOgB,EAAc,QAAU,OAChCV,gBAAgB,OAAD,cAASa,QAAT,IAASA,GAAT,UAASA,EAAQA,cAAjB,aAAS,EAAgBZ,OAAzB,OAJ3B,eACiBa,QAQnBE,EAAa,WACf,IAAIC,EAAO5D,SAASC,eAAe,aACnC2D,EAAKC,UAAYD,EAAKE,cA+B1B,OAAIX,EAGA,sBAAKvC,UAAU,YAAYG,GAAG,YAA9B,UACI,sBAAKH,UAAU,uBAAf,UACI,qBAAKA,UAAU,aAAf,gBAA8BuC,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAMY,QACpC,qBAAKnD,UAAU,gBAAf,SAAiCuC,EAAKG,OAAOC,KAAI,SAAAC,GAAM,gBAAOA,EAAOA,OAAOd,SAArB,aAlC5C,WACnB,IAAMsB,EAAOC,OAAOD,KAAKd,GAEzB,OAAOc,EAAKT,KAAI,SAACW,EAAKT,GAClB,IAAMzB,EAAUkB,EAASgB,GACnBC,EAA2B,IAAVV,EAAc,KAAOO,EAAKP,EAAQ,GACnDJ,EAAcJ,IAAajB,EAAQS,OAAOC,SAEhD,OACI,qBAA0BlB,MAAO,CAAE4C,MAAO,QAA1C,SACI,sBAAKxD,UAAU,gBAAf,UAEQyC,EACE,cAAC,EAAD,CAAWrB,QAASA,IACpB,cAAC,EAAD,CAAcA,QAASA,EAASO,YAAaW,EAASiB,KAE5D,qBAAKvD,UAAU,gBACXY,MAAO,CAAE6C,YAAahB,EAAc,OAAS,MAC7CR,WAAYQ,EAAc,MAAQ,QAFtC,SAGSD,EAAmBpB,EAASqB,KAEpCM,QAZT,cAAiBF,OA2BnBa,GACF,qBAAK1D,UAAU,UACf,qBAAKA,UAAU,yBAAf,SACI,cAAC,EAAD,2BAAiBnB,GAAjB,IAAwBI,OAAQmD,UAX3B,c,yCCHNuB,EA/CG,WAAO,IAAD,EACc7E,mBAAS,IADvB,mBACZgD,EADY,KACF8B,EADE,OAEc9E,mBAAS,IAFvB,mBAEZ+E,EAFY,KAEFC,EAFE,OAGQhF,mBAAS,IAHjB,mBAGZiF,EAHY,KAGLC,EAHK,KAKdxE,EAAY,uCAAG,WAAOgB,GAAP,eAAAyD,EAAA,6DACjBzD,EAAEd,iBAEIwE,EAAa,CACf,aAAc,uCACd,YAAapC,EACb,cAAe+B,GANF,kBAUPM,IAAMC,IAAI,kCAAmC,CAAEC,QAASH,IAVjD,OAYbI,aAAaC,QAAQ,WAAYzC,GACjCwC,aAAaC,QAAQ,WAAYV,GAEjCW,OAAOC,SAASC,SAfH,kDAiBbV,EAAS,2BAjBI,0DAAH,sDAqBlB,OACI,qBAAKhE,UAAU,UAAf,SACI,sBAAKA,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,kBACA,uBAAMC,SAAUT,EAAhB,UACI,uBAAOsB,KAAK,OAAO/B,MAAO+C,EAAUd,SAAU,SAACR,GAAD,OAAOoD,EAAYpD,EAAEU,OAAOnC,QAC1EiB,UAAU,QAAQ2E,YAAY,oBAAoBC,UAAQ,IAC1D,uBAAO9D,KAAK,WAAW/B,MAAO8E,EAAU7C,SAAU,SAACR,GAAD,OAAOsD,EAAYtD,EAAEU,OAAOnC,QAC9EiB,UAAU,QAAQ2E,YAAY,gBAAaC,UAAQ,IACnD,sBAAKC,MAAM,SAAX,UACI,wBAAQ/D,KAAK,SAASd,UAAU,SAAhC,SACI,oDAEJ,oBAAIA,UAAU,QAAd,SAAuB+D,gBCpBhCe,G,MAdH,WACR,OAAIR,aAAaS,QAAQ,YAGrB,cAAC,IAAD,CACIC,OAAO,QACPC,UAAU,uCACV5C,SAAUiC,aAAaS,QAAQ,YAC/BG,WAAYZ,aAAaS,QAAQ,YACjCI,eAAgB,SAACC,GAAD,OAAkB,cAAC,EAAD,eAAcA,OARX,cAAC,EAAD,MCJjDC,IAASC,OAAO,cAAC,EAAD,IAASlG,SAASC,eAAe,W","file":"static/js/main.2d018f21.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\nimport { FaPaperPlane, FaImage } from 'react-icons/fa';\r\n\r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState('');\r\n    const { chatId, creds } = props;\r\n\r\n    const messageInput = document.getElementById(\"message-input\");\r\n    const textInput = document.getElementById(\"text-input\");\r\n    const submitButton = document.getElementById(\"submit-button\");\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n\r\n        if(text.length > 0) sendMessage(creds, chatId, { text });\r\n\r\n        setValue('');\r\n        messageInput.innerText = '';\r\n    }\r\n\r\n    const getValue = () => {\r\n        textInput.value = messageInput.innerText;\r\n        setValue(textInput.value);\r\n\r\n        \r\n        messageInput.addEventListener(\"keyup\", (e) => {\r\n            // Number 13 is the \"Enter\" key on the keyboard\r\n            if (e.keyCode === 13) {\r\n                submitButton.click();\r\n            }\r\n        });\r\n\r\n        isTyping(props, chatId);\r\n    }\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, { files: event.target.files, text: '' });\r\n    }\r\n\r\n    return(\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            \r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\" >\r\n                    <FaImage className=\"picture-icon\" />\r\n                </span>\r\n            </label>\r\n\r\n            <div\r\n                className=\"message-input\"\r\n                id=\"message-input\"\r\n                contentEditable=\"true\"\r\n                data-text=\"Escribe un mensaje...\"\r\n                onInput={getValue}\r\n            />\r\n\r\n            {/*this is to connect the messageInput with the submit event*/}\r\n            <input id=\"text-input\" onSubmit={handleSubmit} style={{display: 'none'}} />\r\n\r\n            <input \r\n                type=\"file\"\r\n                multiple={false}\r\n                id=\"upload-button\"\r\n                style={{ display: 'none' }}\r\n                onChange={handleUpload}\r\n            />\r\n\r\n            <button type=\"submit\" id=\"submit-button\" className=\"send-button\">\r\n                <FaPaperPlane className=\"send-icon\" />\r\n            </button>\r\n        </form>\r\n    );\r\n} \r\n\r\nexport default MessageForm;","const MyMessage = ({ message }) => {\r\n    if(message?.attachments?.length > 0) {\r\n        return(\r\n            <img \r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{ float: 'right' }}\r\n            />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className=\"my-message\"> \r\n            {message.text}\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default MyMessage;","const TheirMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n\r\n    return(\r\n        <div className=\"message-row\"> \r\n            {isFirstMessageByUser && (\r\n                <div \r\n                    className=\"message-avatar\" \r\n                    style={{ backgroundImage: `url(${message?.sender?.avatar})` }}\r\n                />\r\n            )}\r\n            {message?.attachments?.length > 0 \r\n                ? (<img \r\n                    src={message.attachments[0].file}\r\n                    alt=\"message-attachment\"\r\n                    className=\"message-image\"\r\n                    style={{ marginLeft: isFirstMessageByUser ? '10px' : '48px' }}\r\n                />)\r\n                : (\r\n                    <div className=\"their-message\" style={{ marginLeft: isFirstMessageByUser ? '10px' : '48px' }}> \r\n                    {message.text}\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TheirMessage;","import MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\nconst ChatFeed = (props) => {\r\n    const { chats, activeChat, userName, messages } = props;\r\n\r\n    const chat = chats && chats[activeChat];\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => {\r\n        return chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div \r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{ float: isMyMessage ? 'right' : 'left',\r\n                        backgroundImage: `url(${person?.person?.avatar})` }}\r\n            />\r\n        ))\r\n    }\r\n\r\n    const scrollDown = () => {\r\n        var feed = document.getElementById('chat-feed');\r\n        feed.scrollTop = feed.scrollHeight;\r\n    }\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return(\r\n                <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage\r\n                            ? <MyMessage message={message} />\r\n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\r\n                        }\r\n                        <div className=\"read-receipts\" \r\n                            style={{ marginRight: isMyMessage ? '18px' : '0px',\r\n                            marginLeft: isMyMessage ? '0px' : '18px' }} >\r\n                                {renderReadReceipts(message, isMyMessage)}\r\n                        </div>\r\n                        {scrollDown()}\r\n                    </div>\r\n                </div>\r\n            )\r\n        });\r\n    }\r\n\r\n    if(!chat) return 'Loading...';\r\n\r\n    return(\r\n        <div className=\"chat-feed\" id=\"chat-feed\">\r\n            <div className=\"chat-title-container\"> \r\n                <div className=\"chat-title\">{ chat?.title }</div>\r\n                <div className=\"chat-subtitle\">{ chat.people.map(person => `${person.person.username} `) }</div>\r\n            </div>\r\n            { renderMessages() }\r\n            <div className=\"space\" />\r\n            <div className=\"message-form-container\" >\r\n                <MessageForm {...props} chatId={activeChat} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatFeed;","import { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst LoginForm = () => {\r\n    const [ username, setUsername ] = useState('');\r\n    const [ password, setPassword ] = useState('');\r\n    const [ error, setError ] = useState('')\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const authObject = {\r\n            'Project-ID': 'a535e95b-8fbb-46fd-b164-46d3e687cd44',\r\n            'User-Name': username,\r\n            'User-Secret': password\r\n        }\r\n\r\n        try {\r\n            await axios.get('https://api.chatengine.io/chats', { headers: authObject });\r\n\r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('password', password);\r\n\r\n            window.location.reload();\r\n        } catch (error) {\r\n            setError('Pone bien tus datos ctm')\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">ZHAT</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)}\r\n                    className=\"input\" placeholder=\"Nombre de usuario\" required />\r\n                    <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)}\r\n                    className=\"input\" placeholder=\"Contraseña\" required />\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                            <span>Entrar al Zhat</span>\r\n                        </button>\r\n                        <h2 className=\"error\">{error}</h2>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import { ChatEngine } from 'react-chat-engine';\r\n\r\nimport ChatFeed from './components/ChatFeed';\r\nimport ChatList from './components/ChatList';\r\nimport LoginForm from './components/LoginForm';\r\n\r\nimport './styles/styles.css';\r\n\r\nconst App = () => {\r\n    if(!localStorage.getItem('username')) return <LoginForm />\r\n\r\n    return(\r\n        <ChatEngine \r\n            height=\"100vh\"\r\n            projectID=\"a535e95b-8fbb-46fd-b164-46d3e687cd44\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\r\n        />\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}